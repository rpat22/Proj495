using System;
using System.Collections.Generic;
using MySql.Data.MySqlClient;

namespace PhysioDynamik_Prototype_1
{
    public class Patient
    {
        public string Name { get; set; }
        public int PatientID { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public DateTime DateOfBirth { get; set; }
        public List<Appointment> AppointmentList { get; set; } = new List<Appointment>();
        private List<string> PaymentMethods { get; set; }
        public MedicalRecord MedicalRecord { get; set; }

        // Method for selecting an appointment
        public void SelectAppointment(SystemClass system, string slot, int therapistID)
        {
            if (system.CheckSlotAvailability(slot))
            {
                var appointment = new Appointment
                {
                    AppointmentID = new Random().Next(1000, 9999),
                    Date = DateTime.Now,
                    Status = "Scheduled"
                };
                system.AddAppointment(appointment, slot);
                AppointmentList.Add(appointment);
            }
            else
            {
                Console.WriteLine("Selected slot is not available.");
            }
        }
    }

    public class Therapist
    {
// Mocked storage for therapist availabilities
    private static Dictionary<int, List<AvailabilitySlot>> therapistAvailabilities = new Dictionary<int, List<AvailabilitySlot>>();

    /// <summary>
    /// Uploads availability slots for a therapist.
    /// </summary>
    /// <param name="therapistID">Unique identifier for the therapist.</param>
    /// <param name="availabilities">List of availability slots to upload.</param>
    /// <returns>Status confirmation string.</returns>
    public string UploadTherapistAvailabilities(int therapistID, List<AvailabilitySlot> availabilities)
    {
        try
        {
            // Pre-conditions: Validate inputs
            if (therapistID <= 0)
                return "Failure: Invalid therapist ID.";
            
            if (availabilities == null || availabilities.Count == 0)
                return "Failure: No availabilities provided.";

            foreach (var slot in availabilities)
            {
                if (slot.StartTime >= slot.EndTime)
                    return $"Failure: Invalid time range for slot starting at {slot.StartTime}.";
            }

            // Check for overlaps (mock logic for simplicity)
            if (therapistAvailabilities.ContainsKey(therapistID))
            {
                var existingSlots = therapistAvailabilities[therapistID];
                foreach (var newSlot in availabilities)
                {
                    foreach (var existingSlot in existingSlots)
                    {
                        if (newSlot.ConflictsWith(existingSlot))
                            return $"Failure: Overlapping availability slot detected.";
                    }
                }
            }
            else
            {
                therapistAvailabilities[therapistID] = new List<AvailabilitySlot>();
            }

            // Post-conditions: Add new availabilities
            therapistAvailabilities[therapistID].AddRange(availabilities);

            return "Success";
        }
        catch (Exception ex)
        {
            return $"Failure: {ex.Message}";
        }
    }
        public int TherapistID { get; set; }
        public string Name { get; set; }
        public string Specialty { get; set; }
        public List<Appointment> AppointmentList { get; set; }
        public bool PaymentConfirmed { get; set; }
    }

    public class Appointment
    {
        public int AppointmentID { get; set; }
        public DateTime Date { get; set; }
        public string Status { get; set; }

        // Schedule an appointment
        public void ScheduleAppointment(DateTime date)
        {
            Date = date;
            Status = "Scheduled";
            Console.WriteLine($"Appointment {AppointmentID} scheduled for {Date}.");
        }

        // Cancel an appointment
        public void CancelAppointment()
        {
            Status = "Cancelled";
            Console.WriteLine($"Appointment {AppointmentID} has been cancelled.");
        }

        // View appointment status
        public void ViewStatus()
        {
            Console.WriteLine($"Appointment {AppointmentID} status: {Status}");
        }
    }

    public class SystemClass
    {
        public int SystemID { get; set; }
        public DatabaseHelper DatabaseHelper { get; set; }
        public List<string> AvailableSlots { get; set; } = new List<string>
        {
            "9:00 AM", "10:00 AM", "11:00 AM", "1:00 PM", "2:00 PM"
        };

        public List<Appointment> Appointments { get; set; } = new List<Appointment>();

        // Constructor to initialize DatabaseHelper
        public SystemClass()
        {
            DatabaseHelper = new DatabaseHelper();
        }

        // Display available slots
        public void DisplayAvailableSlots()
        {
            Console.WriteLine("Available Slots:");
            foreach (var slot in AvailableSlots)
            {
                Console.WriteLine(slot);
            }
        }

        // Check if a slot is available
        public bool CheckSlotAvailability(string slot)
        {
            return AvailableSlots.Contains(slot);
        }

        // Add a new appointment
        public void AddAppointment(Appointment appointment, string slot)
        {
            if (CheckSlotAvailability(slot))
            {
                Appointments.Add(appointment);
                AvailableSlots.Remove(slot);
                Console.WriteLine($"Appointment {appointment.AppointmentID} added for slot {slot}.");
            }
            else
            {
                Console.WriteLine("Selected slot is not available.");
            }
        }

        // Retrieve all appointments
        public void GetAppointments()
        {
            Console.WriteLine("Appointments List:");
            foreach (var appointment in Appointments)
            {
                Console.WriteLine($"ID: {appointment.AppointmentID}, Date: {appointment.Date}, Status: {appointment.Status}");
            }
        }
    }

    public class Homework
    {
        public int HomeworkID { get; set; }
        public int ClientID { get; set; }
        public int TherapistID { get; set; }
        public DateTime DueDate { get; set; }
        public string SubmissionStatus { get; set; }
    }

    public class Resource
    {
        public int ResourceID { get; set; }
        public int TherapistID { get; set; }
        public int ClientID { get; set; }
        public string ResourceType { get; set; }
        public DateTime DateGiven { get; set; }
    }

    public class Feedback
    {
        public int FeedbackID { get; set; }
        public int HomeworkID { get; set; }
        public int TherapistID { get; set; }
        public int ClientID { get; set; }
        public DateTime DateGiven { get; set; }
    }

    public class RegistrationForm
    {
        public int FormID { get; set; }
    }

    public class Receptionist
    {
        public int ReceptionistID { get; set; }
        public string Name { get; set; }
        public bool PaymentVerified { get; set; }
    }

    public class PaymentGateway
    {
        public int MethodType { get; set; }
        public string AccountNumber { get; set; }
        public string CardHolderName { get; set; }
        public DateTime ExpirationDate { get; set; }

        public bool ProcessTransaction(decimal amount)
        {
            Console.WriteLine($"Processing transaction of {amount:C} for cardholder {CardHolderName}");
            return true;
        }

        public bool ValidatePayment()
        {
            return DateTime.Now < ExpirationDate;
        }
    }

    public class MedicalRecord
    {
        public int PatientID { get; set; }
        public string Report { get; set; }
        public List<DateTime> TreatmentHistory { get; set; }
    }

    public class Assessment
    {
        private int ClientID { get; set; }
        private string Description { get; set; }
        private string Status { get; set; }
        private string Result { get; set; }
    }

    public class AvailabilitySlot
{
    public DateTime StartTime { get; set; }
    public DateTime EndTime { get; set; }
    public string DayOfWeek { get; set; }
    public bool IsRecurring { get; set; }

   
    public bool ConflictsWith(AvailabilitySlot other)
    {
        return this.DayOfWeek == other.DayOfWeek &&
               ((this.StartTime < other.EndTime && this.EndTime > other.StartTime) ||
                (this.StartTime == other.StartTime && this.EndTime == other.EndTime));
    }
}
}
